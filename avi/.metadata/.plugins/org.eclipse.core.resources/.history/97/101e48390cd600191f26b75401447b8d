package com.avi.avi.model;

import org.json.JSONObject;
import org.json.JSONArray;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.json.simple.JSONValue;

import java.io.BufferedReader;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.io.IOException;

public class Pool {
	// Pool properties go here
	private String url;
	private String uuid;
	private String  name;
	private Boolean enabled;
	private String tenant_ref;
	private String cloud_ref;
	private String last_modified;
	private enum lb_algorithm {LB_ALGORITHM_LEAST_CONNECTIONS};
	private Boolean use_service_port;
	private Boolean rewrite_host_header_to_server_name;
	private Boolean host_check_enabled;
	// TODO: conn_pool_properties declaration
	//	conn_pool_properties": {
	//		upstream_connpool_conn_life_tmo": 600000,
	//		upstream_connpool_server_max_cache": 0,
	//		upstream_connpool_conn_max_reuse": 0,
	//		upstream_connpool_conn_idle_tmo": 60000
	//	},
	private Boolean rewrite_host_header_to_sni;
	private Boolean delete_server_on_dns_refresh;
	private Boolean capacity_estimation;
	private Integer fewest_tasks_feedback_delay;
	private Integer capacity_estimation_ttfb_thresh;
	// TODO: fail_action declaration
	//	fail_action": {
	//		type": "FAIL_ACTION_CLOSE_CONN"
	//	},
	private Boolean lookup_server_by_name;
	private enum lb_algorithm_hash {LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS};
	private String analytics_profile_ref;
	private Integer lb_algorithm_core_nonaffinity;
	private Integer graceful_disable_timeout;
	private String vrf_ref;
	private Boolean inline_health_monitor;
	private Integer default_server_port;
	private Integer request_queue_depth;
	// TODO: server_reselect declaration
	//	server_reselect": {
	//		retry_nonidempotent": false,
	//		enabled": false,
	//		retry_timeout": 0,
	//		num_retries": 4
	//	},
	private Boolean sni_enabled;
	private Integer server_timeout;
	private Boolean request_queue_enabled;
	private Integer max_concurrent_connections_per_server;
	private Integer connection_ramp_duration;
	// TODO: analytics_policy declaration
	//	analytics_policy": {
	//		enable_realtime_metrics": false
	//	}
	
	// Property setter functions go here
	public String url;
	private String uuid;
	private String  name;
	private Boolean enabled;
	private String tenant_ref;
	private String cloud_ref;
	private String last_modified;
	private enum lb_algorithm {LB_ALGORITHM_LEAST_CONNECTIONS};
	private Boolean use_service_port;
	private Boolean rewrite_host_header_to_server_name;
	private Boolean host_check_enabled;
	// TODO: conn_pool_properties declaration
	//	conn_pool_properties": {
	//		upstream_connpool_conn_life_tmo": 600000,
	//		upstream_connpool_server_max_cache": 0,
	//		upstream_connpool_conn_max_reuse": 0,
	//		upstream_connpool_conn_idle_tmo": 60000
	//	},
	private Boolean rewrite_host_header_to_sni;
	private Boolean delete_server_on_dns_refresh;
	private Boolean capacity_estimation;
	private Integer fewest_tasks_feedback_delay;
	private Integer capacity_estimation_ttfb_thresh;
	// TODO: fail_action declaration
	//	fail_action": {
	//		type": "FAIL_ACTION_CLOSE_CONN"
	//	},
	private Boolean lookup_server_by_name;
	private enum lb_algorithm_hash {LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS};
	private String analytics_profile_ref;
	private Integer lb_algorithm_core_nonaffinity;
	private Integer graceful_disable_timeout;
	private String vrf_ref;
	private Boolean inline_health_monitor;
	private Integer default_server_port;
	private Integer request_queue_depth;
	// TODO: server_reselect declaration
	//	server_reselect": {
	//		retry_nonidempotent": false,
	//		enabled": false,
	//		retry_timeout": 0,
	//		num_retries": 4
	//	},
	private Boolean sni_enabled;
	private Integer server_timeout;
	private Boolean request_queue_enabled;
	private Integer max_concurrent_connections_per_server;
	private Integer connection_ramp_duration;
	// TODO: analytics_policy declaration
	
	
	// Property getter functions go here
	
	public String set(HashMap values) {
		this.data = JSONValue.toJSONString(values);
		return data;
	}

	public String get() {
		return data;
	}

	public String setJSONData(String jsonData) {
		this.data = jsonData;
		return data;
	}

	public String create(String controllerIP, String username, String password) throws IOException {
		try {
			String postURL = controllerIP + "/api/pool/";
			URL url = new URL(postURL);
			String creds = username + ":" + password;
			String encoding = Base64.getEncoder().encodeToString((creds).getBytes("UTF-8"));
			HttpURLConnection con = (HttpURLConnection) url.openConnection();
			con.setRequestMethod("POST");
			con.setRequestProperty("Content-Type", "application/json");
			con.setRequestProperty("X-Avi-Version", "18.2.3");
			con.setRequestProperty("Authorization", "Basic " + encoding);

			con.setDoOutput(true);

			// Send data of object
			this.sendData(con, this.data);

			// Read response from REST call
			this.data = this.read(con.getInputStream());
			return data;
		} catch (IOException exception) {
			return exception.toString();
		}
	}

	public void sendData(HttpURLConnection con, String data) throws IOException {
		DataOutputStream wr = null;
		try {
			wr = new DataOutputStream(con.getOutputStream());
			wr.writeBytes(data);
			wr.flush();
			wr.close();
		} catch (IOException exception) {
			throw exception;
		} finally {
			this.closeQuietly(wr);
		}
	}

	public String read(InputStream is) throws IOException {
		BufferedReader in = null;
		String inputLine;
		StringBuilder body;
		try {
			in = new BufferedReader(new InputStreamReader(is));

			body = new StringBuilder();

			while ((inputLine = in.readLine()) != null) {
				body.append(inputLine);
			}
			in.close();

			return body.toString();
		} catch (IOException ioe) {
			throw ioe;
		} finally {
			this.closeQuietly(in);
		}
	}

	public void closeQuietly(Closeable closeable) {
		try {
			if (closeable != null) {
				closeable.close();
			}
		} catch (IOException ex) {

		}
	}

	public boolean delete(String controllerIP, String username, String password) throws IOException {
		 JSONObject jObject = new JSONObject(data);
		 String uuid = (String) jObject.get("uuid");
		 String postURL = controllerIP + "/api/pool/"+ uuid;
		 URL url = new URL(postURL);
		 String creds = username + ":" + password;
		 String encoding = Base64.getEncoder().encodeToString((creds).getBytes("UTF-8"));
		 HttpURLConnection con = (HttpURLConnection) url.openConnection();
		 con.setRequestMethod("DELETE");
		 con.setRequestProperty("X-Avi-Version", "18.2.3");
		 con.setRequestProperty("Authorization", "Basic " + encoding);
		  
		 con.setDoOutput(true);
		 
		 this.read(con.getInputStream());
		 this.data = null;
		 return true;
		 
	}
}