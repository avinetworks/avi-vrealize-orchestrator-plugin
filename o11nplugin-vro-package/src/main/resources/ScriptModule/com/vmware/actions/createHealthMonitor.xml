<?xml version="1.0" encoding="UTF-8"?>
<dunes-script-module name="createHealthMonitor"
	result-type="Avi:WorkflowRuntime" api-version="6.0.0"
	id="223e67fa-ce16-46c9-82af-34bfc978b26e" version="0.1.3"
	allowed-operations="vfe">
	<param n="Tenant" t="string"><![CDATA[Tenant name]]></param>
	<param n="monitorType" t="string"><![CDATA[Healthmonitor type ]]></param>
	<param n="HealthMonitorName" t="string"><![CDATA[Healthmonitor name]]></param>
	<param n="Command" t="string"><![CDATA[Command code for  external type healthmonitor]]></param>
	<param n="Request" t="string"><![CDATA[Command code for  UDP type healthmonitor]]></param>
	<param n="DNSData" t="string"><![CDATA[Command code for DNS type healthmonitor]]></param>
	<param n="ResponseCode" t="Array/string"><![CDATA[Respose code for HTTP type healthmonitor]]></param>
	<param n="HTTPSResponse" t="Array/string"><![CDATA[Respose code for HTTPS type healthmonitor]]></param>
	<param n="isFederated" t="boolean"><![CDATA[Add is_federated ]]></param>
	<param n="monitorPort" t="number"><![CDATA[Add monitor port]]></param>
	<param n="receiveTimeout" t="number"><![CDATA[Add receive timeout]]></param>
	<param n="sendInterval" t="number"><![CDATA[Add send interval]]></param>
	<param n="successfulChecks" t="number"><![CDATA[Add successful checks]]></param>
	<param n="Description" t="string"><![CDATA[Add description for healthmonitor]]></param>
	<param n="tcpHalfOpen" t="boolean"><![CDATA[Half-Open (Close connection before completion) ]]></param>
	<param n="tcpResponse" t="string"><![CDATA[Server response data  for tcp monitor]]></param>
	<param n="tcpRequest" t="string"><![CDATA[Client request data for tcp monitor]]></param>
	<param n="maintenanceResponse" t="string"><![CDATA[Maintenance server response data for tcp monitor]]></param>
	<param n="failedChecks" t="number"><![CDATA[Failed checks]]></param>
	<param n="workflowRuntime" t="Avi:WorkflowRuntime"><![CDATA[Object of the plugin]]></param>
	<script encoded="false"><![CDATA[/************************************************************
* This action initializes health monitor properties objects *
* and puts user input into the health monitor object        *
*************************************************************/

try{

	// Initialize pool property object
	var properties = new Object();
	
	// Check the Response Code 
	var Response = ""
	if (monitorType == "HTTP"){
		Response = ResponseCode
	}else if(monitorType == "HTTPS"){
		Response = HTTPSResponse
	}
	
	// Form a Response code for HealthMonitor based on user input
	for (i=0; i<Response.length; i++) {
		var code = "HTTP_" + Response[i]
		Response[i] = code
		
	}
	
	// Form a load balancer alogorithm type based on user input
	var type = monitorType.toUpperCase();
	type = "HEALTH_MONITOR_"+type.replace(" ", "_");
	if (type == "HEALTH_MONITOR_EXTERNAL") {
		properties.external_monitor = { "command_code": Command};
	}else if (type == "HEALTH_MONITOR_UDP") {
		properties.udp_monitor = { "udp_request": Request};
	}else if (type == "HEALTH_MONITOR_DNS") {
		properties.dns_monitor = { "query_name": DNSData };
	}else if (type == "HEALTH_MONITOR_HTTP") {
		properties.http_monitor = { "http_response_code": Response };
	}else if (type == "HEALTH_MONITOR_HTTPS") {
		properties.https_monitor = { 
			"ssl_attributes": {
				"ssl_profile_ref": "/api/sslprofile?name=System-Standard",
				"ssl_key_and_certificate_ref": "/api/sslkeyandcertificate?name=System-Default-Cert"
			},
			"http_response_code": Response 
		};
	}else if (type == "HEALTH_MONITOR_TCP") {
		if (tcpHalfOpen != false){
			properties.tcp_monitor = {
				"tcp_request": tcpRequest,
				"tcp_response": tcpResponse,
				"tcp_half_open": tcpHalfOpen,
			}
		}else{
			properties.tcp_monitor = {
				"tcp_request": tcpRequest,
				"tcp_response": tcpResponse,
				"tcp_half_open": tcpHalfOpen,
				"maintenance_response": maintenanceResponse
				}
		}
	}
	// Set load balancer algorithm in properties
	properties.type = type;
	
	// Set tenant reference
	properties.tenant_ref  = "/api/tenant?name="+Tenant;
	
	// Set poolname to properties
	properties.name = HealthMonitorName;
	
	// Add description for healthmonitor
	properties.description = Description;
	
	// Set is_federated
	properties.is_federated = isFederated;
	
	// Set monitor_port
	properties.monitor_port = monitorPort;
		
	// Set receive_timeout
	properties.receive_timeout = receiveTimeout;

	// Set send_interval
	properties.send_interval = sendInterval;
	
	// Set successful_checks
	properties.successful_checks = successfulChecks;
	
	// Set failed checks
	properties.failed_checks = failedChecks;
	
	// Convert properties object into JSON string
	var jsonData = JSON.stringify(properties);

//	return jsonData
	workflowRuntime.getAviVroClient().add("healthmonitor", jsonData, workflowRuntime.getWorkflowId())
	return workflowRuntime

} catch (e) {
	throw "Error when create HealthMonitor -> "+ e
}
]]></script>
</dunes-script-module>